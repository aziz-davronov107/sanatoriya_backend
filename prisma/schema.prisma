// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
}

model User {
  id      Int      @id @default(autoincrement())
  email   String?   @unique
  profile Profile?
  orders  Order[]
  reviews Review[]
  phone   String?  @unique
  telegramChatId String? @unique
  @@map("users")

}

model Profile {
  id         Int      @id @default(autoincrement())
  role       UserRole @default(USER)
  imageUrl   String?  @map("image_url")
  fullName   String?  @map("full_name")
  address    String?
  isDisabled Boolean? @default(false)
  userId     Int      @unique @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Order {
  id          Int         @id @default(autoincrement())
  roomId      Int         @map("room_id")
  duration    Int
  startDate   DateTime    @map("from")
  endDate     DateTime    @map("to")
  userId      Int         @map("user_id")
  hasDiscount Boolean     @default(false)
  totalAmount Int         @map("total_amount")
  status      OrderStatus @default(PENDING)

  room Room @relation(fields: [roomId], references: [id], onDelete: Restrict)
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([roomId])
  @@index([userId])
  @@map("orders")
}

model Room {
  id            Int      @id @default(autoincrement())
  roomNumber    Int      @unique @map("room_number")
  pricePerDay   Int      @map("price_per_day")
  beds          Int
  bathrooms     Int
  floor         Int
  isAvailable   Boolean  @default(true)
  title         String
  description   String
  features      Json
  categoryId    Int      @map("category_id")
  availableFrom DateTime

  category RoomCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  photos   Photo[]
  orders   Order[]

  @@index([categoryId])
  @@map("rooms")
}

model Photo {
  id         Int    @id @default(autoincrement())
  url        String
  orderIndex Int    @default(0) @map("orderIndex")
  roomId     Int    @map("room_id")
  room       Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, orderIndex])
  @@index([roomId])
  @@map("photos")
}

model RoomCategory {
  id    Int    @id @default(autoincrement())
  title String
  rooms Room[]

  @@map("room_category")
}

model Review {
  id          Int    @id @default(autoincrement())
  description String
  url         String
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
